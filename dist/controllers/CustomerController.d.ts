import { Request, Response, NextFunction } from 'express';
import { AuthenticatedRequest } from '../middleware/AuthMiddleware';
export declare class CustomerController {
    private customerModel;
    private logger;
    constructor();
    createCustomer: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getCustomerById: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    getCustomerByEmail: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    updateCustomer: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    deleteCustomer: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    searchCustomers: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    updateCustomerProfile: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    updateCustomerPreferences: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    addCustomerAddress: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    updateCustomerAddress: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    deleteCustomerAddress: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getCustomerAddresses: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    verifyCustomer: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    getCustomerStats: (_req: Request, res: Response, next: NextFunction) => Promise<void>;
    updateLastLogin: (req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>;
    getCustomerByIdGraphQL(customerId: string): Promise<{
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
        loyaltyPoints: {
            id: string;
            createdAt: Date;
            customerId: string;
            points: number;
            type: import(".prisma/client").$Enums.LoyaltyPointType;
            description: string;
            referenceId: string | null;
            expiresAt: Date | null;
            isRedeemed: boolean;
            redeemedAt: Date | null;
        }[];
        activities: {
            id: string;
            createdAt: Date;
            customerId: string;
            description: string;
            activityType: import(".prisma/client").$Enums.ActivityType;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            ipAddress: string | null;
            userAgent: string | null;
        }[];
    } & {
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getCustomerByEmailGraphQL(email: string): Promise<{
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
    } & {
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    searchCustomersGraphQL(filters: any, pagination: any): Promise<{
        customers: ({
            profile: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                preferences: import("@prisma/client/runtime/library").JsonValue | null;
                customerId: string;
                avatar: string | null;
                bio: string | null;
                emergencyContact: string | null;
                dietaryRestrictions: string | null;
                specialRequests: string | null;
            } | null;
            preferences: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                customerId: string;
                language: string;
                currency: string;
                timezone: string;
                emailNotifications: boolean;
                smsNotifications: boolean;
                pushNotifications: boolean;
                marketingEmails: boolean;
            } | null;
            addresses: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                customerId: string;
                type: import(".prisma/client").$Enums.AddressType;
                addressLine1: string;
                addressLine2: string | null;
                city: string;
                state: string;
                postalCode: string;
                country: string;
                isDefault: boolean;
            }[];
        } & {
            id: string;
            email: string;
            phone: string | null;
            firstName: string;
            lastName: string;
            dateOfBirth: Date | null;
            gender: import(".prisma/client").$Enums.Gender | null;
            isVerified: boolean;
            isActive: boolean;
            lastLoginAt: Date | null;
            createdAt: Date;
            updatedAt: Date;
        })[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    getCustomerStatsGraphQL(): Promise<{
        totalCustomers: number;
        verifiedCustomers: number;
        activeCustomers: number;
        newCustomersThisMonth: number;
        newCustomersThisWeek: number;
        newCustomersToday: number;
        verificationRate: number;
    }>;
    createCustomerGraphQL(input: any): Promise<{
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
    } & {
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateCustomerGraphQL(customerId: string, input: any): Promise<{
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
    } & {
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteCustomerGraphQL(customerId: string): Promise<boolean>;
    updateCustomerProfileGraphQL(customerId: string, input: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
        customerId: string;
        avatar: string | null;
        bio: string | null;
        emergencyContact: string | null;
        dietaryRestrictions: string | null;
        specialRequests: string | null;
    }>;
    updateCustomerPreferencesGraphQL(customerId: string, input: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        language: string;
        currency: string;
        timezone: string;
        emailNotifications: boolean;
        smsNotifications: boolean;
        pushNotifications: boolean;
        marketingEmails: boolean;
    }>;
    addCustomerAddressGraphQL(customerId: string, input: any): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        type: import(".prisma/client").$Enums.AddressType;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        state: string;
        postalCode: string;
        country: string;
        isDefault: boolean;
    }>;
    updateCustomerAddressGraphQL(addressId: string, input: any): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        type: import(".prisma/client").$Enums.AddressType;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        state: string;
        postalCode: string;
        country: string;
        isDefault: boolean;
    }>;
    deleteCustomerAddressGraphQL(addressId: string): Promise<void>;
    getCustomerAddressesGraphQL(customerId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        type: import(".prisma/client").$Enums.AddressType;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        state: string;
        postalCode: string;
        country: string;
        isDefault: boolean;
    }[]>;
    verifyCustomerGraphQL(customerId: string): Promise<{
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateLastLoginGraphQL(customerId: string, ipAddress?: string, userAgent?: string): Promise<boolean>;
    addLoyaltyPointsGraphQL(customerId: string, input: any): Promise<{
        id: string;
        createdAt: Date;
        customerId: string;
        points: number;
        type: import(".prisma/client").$Enums.LoyaltyPointType;
        description: string;
        referenceId: string | null;
        expiresAt: Date | null;
        isRedeemed: boolean;
        redeemedAt: Date | null;
    }>;
    redeemLoyaltyPointsGraphQL(customerId: string, input: any): Promise<{
        id: string;
        createdAt: Date;
        customerId: string;
        points: number;
        type: import(".prisma/client").$Enums.LoyaltyPointType;
        description: string;
        referenceId: string | null;
        expiresAt: Date | null;
        isRedeemed: boolean;
        redeemedAt: Date | null;
    }>;
    logCustomerActivityGraphQL(customerId: string, input: any): Promise<boolean>;
    sendCustomerNotificationGraphQL(customerId: string, input: any): Promise<{
        id: string;
        createdAt: Date;
        message: string;
        customerId: string;
        type: import(".prisma/client").$Enums.NotificationType;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        title: string;
        isRead: boolean;
        readAt: Date | null;
    }>;
    createCustomerGrpc(call: any, callback: any): Promise<void>;
    getCustomerByIdGrpc(call: any, callback: any): Promise<void>;
    getCustomerByEmailGrpc(call: any, callback: any): Promise<void>;
    updateCustomerGrpc(call: any, callback: any): Promise<void>;
    deleteCustomerGrpc(call: any, callback: any): Promise<void>;
    searchCustomersGrpc(call: any, callback: any): Promise<void>;
    updateCustomerProfileGrpc(call: any, callback: any): Promise<void>;
    updateCustomerPreferencesGrpc(call: any, callback: any): Promise<void>;
    addCustomerAddressGrpc(call: any, callback: any): Promise<void>;
    updateCustomerAddressGrpc(call: any, callback: any): Promise<void>;
    deleteCustomerAddressGrpc(call: any, callback: any): Promise<void>;
    getCustomerAddressesGrpc(call: any, callback: any): Promise<void>;
    verifyCustomerGrpc(call: any, callback: any): Promise<void>;
    updateLastLoginGrpc(call: any, callback: any): Promise<void>;
    getCustomerStatsGrpc(_call: any, callback: any): Promise<void>;
    addLoyaltyPointsGrpc(call: any, callback: any): Promise<void>;
    redeemLoyaltyPointsGrpc(call: any, callback: any): Promise<void>;
    logCustomerActivityGrpc(call: any, callback: any): Promise<void>;
    sendCustomerNotificationGrpc(call: any, callback: any): Promise<void>;
    private mapCustomerToProto;
    private mapCustomerProfileToProto;
    private mapCustomerPreferencesToProto;
    private mapCustomerAddressToProto;
    private mapCustomerLoyaltyPointToProto;
    private mapCustomerNotificationToProto;
}
export default CustomerController;
//# sourceMappingURL=CustomerController.d.ts.map