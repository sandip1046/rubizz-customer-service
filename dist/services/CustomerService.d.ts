import { CreateCustomerData, CustomerProfileData, CustomerPreferencesData, CustomerAddressData, CustomerSearchFilters, CustomerPaginationOptions } from '../models/Customer';
export declare class CustomerService {
    private customerModel;
    private emailService;
    private redisService;
    private logger;
    constructor();
    createCustomer(customerData: CreateCustomerData): Promise<{
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
    } & {
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    verifyCustomerEmail(verificationToken: string): Promise<{
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateCustomerProfile(customerId: string, profileData: CustomerProfileData): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        preferences: import("@prisma/client/runtime/library").JsonValue | null;
        customerId: string;
        avatar: string | null;
        bio: string | null;
        emergencyContact: string | null;
        dietaryRestrictions: string | null;
        specialRequests: string | null;
    }>;
    updateCustomerPreferences(customerId: string, preferencesData: CustomerPreferencesData): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        language: string;
        currency: string;
        timezone: string;
        emailNotifications: boolean;
        smsNotifications: boolean;
        pushNotifications: boolean;
        marketingEmails: boolean;
    }>;
    addCustomerAddress(customerId: string, addressData: CustomerAddressData): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        type: import(".prisma/client").$Enums.AddressType;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        state: string;
        postalCode: string;
        country: string;
        isDefault: boolean;
    }>;
    updateCustomerAddress(addressId: string, addressData: Partial<CustomerAddressData>): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        customerId: string;
        type: import(".prisma/client").$Enums.AddressType;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        state: string;
        postalCode: string;
        country: string;
        isDefault: boolean;
    }>;
    deleteCustomerAddress(addressId: string): Promise<void>;
    searchCustomers(filters: CustomerSearchFilters, pagination?: CustomerPaginationOptions): Promise<any>;
    getCustomerWithDetails(customerId: string): Promise<{
        addresses: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            type: import(".prisma/client").$Enums.AddressType;
            addressLine1: string;
            addressLine2: string | null;
            city: string;
            state: string;
            postalCode: string;
            country: string;
            isDefault: boolean;
        }[];
        loyaltyPoints: {
            total: number;
            recent: {
                id: string;
                createdAt: Date;
                customerId: string;
                points: number;
                type: import(".prisma/client").$Enums.LoyaltyPointType;
                description: string;
                referenceId: string | null;
                expiresAt: Date | null;
                isRedeemed: boolean;
                redeemedAt: Date | null;
            }[];
        };
        recentActivities: {
            id: string;
            createdAt: Date;
            customerId: string;
            description: string;
            activityType: import(".prisma/client").$Enums.ActivityType;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            ipAddress: string | null;
            userAgent: string | null;
        }[];
        profile: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            preferences: import("@prisma/client/runtime/library").JsonValue | null;
            customerId: string;
            avatar: string | null;
            bio: string | null;
            emergencyContact: string | null;
            dietaryRestrictions: string | null;
            specialRequests: string | null;
        } | null;
        preferences: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            customerId: string;
            language: string;
            currency: string;
            timezone: string;
            emailNotifications: boolean;
            smsNotifications: boolean;
            pushNotifications: boolean;
            marketingEmails: boolean;
        } | null;
        activities: {
            id: string;
            createdAt: Date;
            customerId: string;
            description: string;
            activityType: import(".prisma/client").$Enums.ActivityType;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            ipAddress: string | null;
            userAgent: string | null;
        }[];
        id: string;
        email: string;
        phone: string | null;
        firstName: string;
        lastName: string;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        isVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getCustomerLoyaltyPoints(customerId: string): Promise<{
        total: number;
        recent: {
            id: string;
            createdAt: Date;
            customerId: string;
            points: number;
            type: import(".prisma/client").$Enums.LoyaltyPointType;
            description: string;
            referenceId: string | null;
            expiresAt: Date | null;
            isRedeemed: boolean;
            redeemedAt: Date | null;
        }[];
    }>;
    getCustomerRecentActivities(customerId: string, limit?: number): Promise<{
        id: string;
        createdAt: Date;
        customerId: string;
        description: string;
        activityType: import(".prisma/client").$Enums.ActivityType;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        ipAddress: string | null;
        userAgent: string | null;
    }[]>;
    addLoyaltyPoints(customerId: string, points: number, type: string, description: string, referenceId?: string): Promise<{
        id: string;
        createdAt: Date;
        customerId: string;
        points: number;
        type: import(".prisma/client").$Enums.LoyaltyPointType;
        description: string;
        referenceId: string | null;
        expiresAt: Date | null;
        isRedeemed: boolean;
        redeemedAt: Date | null;
    }>;
    redeemLoyaltyPoints(customerId: string, points: number, description: string, referenceId?: string): Promise<{
        id: string;
        createdAt: Date;
        customerId: string;
        points: number;
        type: import(".prisma/client").$Enums.LoyaltyPointType;
        description: string;
        referenceId: string | null;
        expiresAt: Date | null;
        isRedeemed: boolean;
        redeemedAt: Date | null;
    }>;
    logCustomerActivity(customerId: string, activityType: string, description: string, metadata?: any): Promise<void>;
    sendCustomerNotification(customerId: string, type: string, title: string, message: string, metadata?: any): Promise<{
        id: string;
        createdAt: Date;
        message: string;
        customerId: string;
        type: import(".prisma/client").$Enums.NotificationType;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        title: string;
        isRead: boolean;
        readAt: Date | null;
    }>;
    getCustomerStatistics(): Promise<{
        totalCustomers: number;
        verifiedCustomers: number;
        activeCustomers: number;
        newCustomersThisMonth: number;
        newCustomersThisWeek: number;
        newCustomersToday: number;
        verificationRate: number;
    }>;
    updateLastLogin(customerId: string, ipAddress?: string, userAgent?: string): Promise<void>;
    deleteCustomer(customerId: string): Promise<void>;
}
export default CustomerService;
//# sourceMappingURL=CustomerService.d.ts.map